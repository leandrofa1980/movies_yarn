Objetivos do projeto para esta aula:

- Implementar o back end
- Modelo de domínio
- Acesso a banco de dados
- Estruturar o back end no padrão camadas
- Criar endpoints da API REST
- Implantação na nuvem

===== Configurações de segurança =====

- vamos abrir o STS e selecionar o projeto
- na pasta src é onde vamos colocar as classes Java
- no pacote principal do projeto vamos criar uma nova classe  para a config de segurança de cors que é o contato de sistemas diferentes em hosts diferentes por meio dessa config podemos liberar esse acesso
- no nome do pacote acrescentar .config para criar um subpacote
- no nome da classe colocar SecurityConfig
- vamos colar o código:

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private Environment env;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		if (Arrays.asList(env.getActiveProfiles()).contains("test")) {
			http.headers().frameOptions().disable();
		}
		
		http.cors().and().csrf().disable();
		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		http.authorizeRequests().anyRequest().permitAll();
	}

	@Bean
	CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration().applyPermitDefaultValues();
		configuration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration);
		return source;
	}
}

- vamos importar as classes com o atalho ctrl+shift+o
- vamos escolher o nome menor, é o que não tem o reactive e clicar em next
- no próximo escolher o que tem o springframework
- no próximo também escolher o que não tem o reactive


===== Entidades e Seed do BD =====

Modelo conceitual:

- vamos olhar o modelo das classes que vamos criar nesse projeto (mostrar a imagem das enidades)
- vamos criar a entidade Movie com seus atributos (perguntar sobre os atributos)
- o mesmo para user
- na entidade score falar que ela foi criada por causa da relação muito para muitos com um atributo extra 
- vamos agora criar as entidades
- criar o pacote entities
- primeiro a class Movie e seus atributos:
	Long id
	String title
	Double score
	Integer count
	String image

- agora vamos fazer o construtor vazio e o com argumentos
- agora os getters e setters
- agora a class User, seus atributos, construtores e os getters e setters
	Long id
	String email

- nossa próxima classe é o score como essa classe tem relação com as outras entidades é preciso criar uma chave primária para a relação entre as classes que vai ser uma classe auxiliar, lembrando das formas normais é preciso colocar essa relação em outra classe
- cria uma classe chamada ScorePK e nessa classe colocar a referência das classes Movies e User:
private Movie movie;
private User user;
- vamos criar os construtores e getters e setters
- vamos criar a classe Score e seus atributos
	private ScorePK id = new ScorePK(); // esse atributo vai fazer referência para as outras classes e colocamos o new para instanciar o objeto(criar esse objeto)
	private Double value; que vai ser a nota de avaliação do filme

- agora os construtores e getters e setters
- agora para associar o score com o filme vamos criar um set para isso 
	public void setMovie(Movie movie) {
		id.setMovie(movie);  // assim salvamos a referêcia 
	}
	public void setUser(User user) {
		id.setUser(user);
	}
- pronto fizemos nossas classes

- vamos agora configurar o banco de dados por enquanto vamos utilizar o BD do H2
- para configurar o BD vamos no arquivo application.properties e colocar algumas linhas
- primeiro as informações do perfil de teste e a limitação do JPA para funcionar na camada de serviço

spring.profiles.active=test

spring.jpa.open-in-view=false

- vamos criar um arquivo na pasta do source e color as configurações
- arquivo: application-test.properties
- config: 
# Dados de conexão com o banco H2
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=

# Configuração do cliente web do banco H2
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Configuração para mostrar o SQL no console
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

- simplismente estamos passando um usuário e senha; um cliente para administrar o BD e por último  mostrar o SQL no console do STS
- vamos agora fazer o mapeamento do objeto relacional nas classes
- simplismente são config que informam para JPA(que faz esse mapeamento) como os objetos serão convertidos para o BD
- vamos colocar em cada classe uma anotação do Spring Boot:

CLASSE MOVIE (lembrar dos imports)
@Entity
@Table(name = "tb_movie");  

- agora precisamos informar que o id da classe será o id do BD:

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY) // configura que o id será auto increment

- o mesmo para a classe User só alterar o nome da tabela (tb_user)

- no Score vai ficar:
@Entity
@Table(name = "tb_score");

- no id como ele faz referência ele vai ser assim:

@EmbeddedId

- na classe ScorePK tem uma particularidade
- como temos chaves estrangeiras precisamos fazer a relação entre elas:

@Embeddable

- e nas referencias das chaves estrangeiras do movie e do user fica assim:

@ManyToOne
@JoinColumn(name = "movie_id")
private Movie movie; 

@ManyToOne
@JoinColumn(name = "user_id")
private USer user;

vamos ver se funcionou

- agora vamos popular o seed do BD 
- primeiro criar o arquivo import.sql dentro do resource
- vamos copiar e colar os inserts (passar para os alunos)
- vamos conferir no H2

===== BUSCANDO FILME =====

- explicar o padrão de camadas

- vamos agora criar o objeto repository que é a camada de acesso a dados
- vamos criar uma nova classe e chamar de 'MovieRepository' e no pacote colocar o nome 'repositories'

- para implementar o objeto que vai ser responsável por fazer as operações de buscar, salvar, deletar e atualizar basta trocar de 'classe' para 'inteface' e essa inteface vai herdar da JpaRepository essas operações fica assim:

public interface MovieRepository extends JpaRepository <Movie, Long> {

}

- agora o DTO que é um objeto para transações de dados e o DTO aqui esta fazendo a busca de filmes
- vamos criar um DTO que vai ter os mesmos atributos do movie sem as anotações
- criar uma classe MovieDTO no subpacote .dto

- podemos copiar os atributos daclasse movie para o DTO
- a diferença é que o dto não vai estar sendo monitorado pela ORM da JPA

- vamos criar o construtor vazio e o com argumentos
- vamos criar também um construtor que recebe a entidade para facilitar a cópia dos objetos para o dto:

public MovieDTO(Movie movie) {
  id = movie.getId();
  title = movie.getTitle();
  score = movie.getScore();
  count = movie.getCount();
  image = movie.getImage();
} 

- vamos colocar o getters e setters

- agora vamos criar o service que vai realizar a transação de buscar os filmes
- criar uma nova classe e chamar de MovieService no pacote services
- precisamos colocar a anotação @Service que registra essa classe como um componente do sistema
- vamos agora criar os métodos primeiro o de buscar os filmes

public List<MovieDTO> findAll() {

} 

- nesse método o retorno precisa ser DTO por causa do contato feito entre a camada de serviço e o controlador que precisa devolver a resposta para o DTO
- a ideia e resolver tudo dentro do service e devolver um objeto simples sem transação
- agora para faze uma consulta no BD vamos usar o repository
- primeiro vamos colocar a instancia do repository:

@Autowired // que vai gerenciar a dependencia do objeto
    private MovieRepository repository;

public List<MovieDTO> findAll() {
	
} 

- agora vamos chamar o BD com o repository. que vai mostrar as operações do repository
- vamos utilizar o findAll() e colocar o retorno desse método:

public List<MovieDTO> findAll() {
    List<Movie> result = repository.findAll();
}

- vamos converter de Movie para DTO

- mas antes vamos paginar nossa busca alterando alguns argumentos:

public Page<MovieDTO> findAll(Pageable pageable) {
    Page<Movie> result = repository.findAll(pageable);
}

- vamos colocar uma função para converter Movie para DTO

public Page<MovieDTO> findAll(Pageable pageable) {
    Page<Movie> result = repository.findAll(pageable);
    Page<MovieDTO> page = result.map(x -> new MovieDTO(x));
    return page;
}

- o map vai aplicar uma função a cada elemento da lista que colocamos o nome de x e retorna a variavel page criada
- para resolver toda essa transação vamos colocar uma anotação @Transactional do spring framework com uma propriedade que informa que esse método é de leitura:

@Transactional(readOnly = true)
public Page<MovieDTO> findAll(Pageable pageable) {
    Page<Movie> result = repository.findAll(pageable);
    Page<MovieDTO> page = result.map(x -> new MovieDTO(x));
    return page;
}

- para buscar por um filme vamos implementar o mesmo método com algumas altrações para um filme específico:

@Transactional(readOnly = true)
public MovieDTO findById(Long id) {
    Movie result = repository.findById(id).get();
    MovieDTO dto = new MovieDTO(result);
    return dto;
}


- agora criar o controller
- criar uma nova classe chamar de MovieController e no subpacote colocar controllers
- essa camada vai implementar o endpoint que é o endereço para acesssar no navegador ou no postman como uma página de filmes
- vamos configurar com as anotações:

@RestController
@RequestMapping(value = "/movies")
public class MovieController {
}

- agora vamos cirar o método para retornar a página de filmes:

public Page<MovieDTO> findAll(Pageable pageable) {

}

- aqui essa classe precisa instanciar o objeto da classe service 
- vamos colocar o componente

@Autowired
private MovieService service;

- e pra finalizar coolocamos o return do método:

public Page<MovieDTO> findAll(Pageable pageable) {
    return service.findAll(pageable);
}

- agora vamos colocar o endpoint para responder as requisições HTTP
- basta colocar a anotação @GetMapping em cima do método:

@GetMapping
public Page<MovieDTO> findAll(Pageable pageable) {
    return service.findAll(pageable);
}

- para buscar por um filme vamos utilizar o mesmo método e fazer as alterações:

@GetMapping(value = "/{id}")
public MovieDTO findById(@PathVariable Long id) {
    return service.findById(id);
}

- vamos testar no navegado
- no postman vamos criar uma nova coleção e testar os endpoints
- vamos usar um atributo no postman para consultar uma quantidade de elemento por exemplo

http://localhost:8080/movies?size=10

- para consultar a segunda página
- por padrão a página está em 0
- colocando outro atributo ele vai buscar a próxima página:

http://localhost:8080/movies?size=10&page=1

- para buscar por um filme basta colocar o /id


- vamos agora salvar as avaliações

===== EXPLICAÇÂO =====

para salvar a avaliação, precisamos identificar o id do filme, colocar o email e a nota(avaliação) do usuário, para salvar essa avaliação e mostrar na tela a nota(avaliação) atualizada, para isso vamos criar uma lógica para entender o que temos que fazer:

(mostrar a imagem com a lógica) 

 - primeiro vamos criar um DTO para receber os 3 dados que são o id do filme, email e resultado da avaliação
- no pacote do DTO vamos criar uma nova classse e chamar de ScoreDTO
- vamos colocar os atributos:

Long movieid;
String email;
Double score;

- agora os construtore e os getters e setters

- vamos agora criar um endpoint no controller para quando o usuário preencher os dados e clicar no salvar esses dados sejam salvos no BD
- outra questão é fazer com que um usuário tenha apenas uma avaliação, caso o mesmo email coloque outra nota não pode ter alteração na avaliação 
- para fazer isso o endpoint vai ser o verbo http  PUT que serve para atualizar e salvar de forma idempontente:
**Um método HTTP é idempotente se uma requisição idêntica pode ser feita uma ou mais vezes em sequência com o mesmo efeito enquanto deixa o servidor no mesmo estado.**

- no pacote do controller podemos cópiar o MovieController o nome da classe vai ser ScoreController
- vamos mudar o caminho para "/scores"
- e vamos apagar a chamada do service e a busca de todos os filmes
- vamos deixar a busca por id e trocar de @GetMapping para @PutMapping apagar o argumento e ajustar os imports

- no método vamos mudar o nome dele para saveScore e o argumento dele vai ser o DTO que criamos:

saveScore(ScoreDTO dto)
- fica assim:
@PutMapping
public MovieDTO saveScore(ScoreDTO dto){
  return null;
} 

- estamos fazendo isso para entender que a tela do formulário para avaliação vai ser um put que recebe o dto do  ScoreDTO que criamos

- fazer um put no postman
- fazendo esse put temos o corpo criado em Json que tem a mesma estrutura do ScoreDTO o programa vai entender que o que foi criado no put vai casar com o ScoreDTO
- e precisamos colocar uma anotação no nosso método para que ele entenda e case as informações 

- no argumento do método vamos colocar o @RequestBody e fazer o import:

saveScore(@RequestBody ScoreDTO dto){
  return null;
} 

- agora vamos para a classe serviço que integra tudo isso que fizemos
- vamos copiar o MovieService para ScoreService
- vamos apagar os métodos que existem no service
- vamos precisar do repository para buscar o id do filme que vai ser feita a atualização por exemplo
- só vamos mudar o nome da variável de repository para movieRepository
- vamos criar um user repository porque vamos precisar recuperar o usuário pelo email 
- no pacote do repository vamos criar uma nova interface de UserRepository e extender a JpaRepository
- aproveitando vamos criar o ScoreRepository que vai servir para salvar o score
- aqui podemos copiar o score para acelerar o processo e mudar o tipo da entidade para Score e o tipo do id dela que é o ScorePK e fazer os imports
- para fazer a busca por email vamos fazer um método utilizando o Jpa no UserRepository:
User finByEmail(String email);
- quando colocamos no nome do método e o argumento do email o Jpa entende e vai buscar o email do usuário específico
- o que fizemo foi padronizar o nome do método
- vamos voltar no ScoreService e vamos chamar o que criamos:
- podemos copiar o movieRepository e só alterar os nomes:

@Autowired
private MovieRepository movieRepository 

@Autowired
private UserRepository userRepository

@Autowired
private ScoreRepository scoreRepository

- agora vamos fazer o método para salvar a partir do DTO que criamos:

@Transactional
public void saveScore(ScoreDTO dto){
   
}

- vamos fazer agora usar a lógica criada:

@Transactional
public void saveScore(ScoreDTO dto){
   User user = userRepository.findByEmail(dto.getEmail()); // aqui vamos buscar o usuário pelo email e guardar na variável user
}
- fazer o import do User
- precisamos verificar se o usuário não existe é preciso inserir ele no BD fica assim:
@Transactional
public void saveScore(ScoreDTO dto){
   User user = userRepository.findByEmail(dto.getEmail());
   if(user == null){
      user = new User():
      user.setEmail(dto.getEmail()); 
   }
}

- com isso criamos um objeto novo com o email para inserir no BD e agora vamos salvar no BD:

@Transactional
public void saveScore(ScoreDTO dto){
   User user = userRepository.findByEmail(dto.getEmail());
   if(user == null){
      user = new User():
      user.setEmail(dto.getEmail()); 
      user = userRepository.saveAndFlush(user);
   }
}

- assim o objeto para acessa os dados é o repository, o saveAndFlush é um método para salvar no BD e atualizar por garantia, passando o user que vai retornar o novo objeto na variável user

- agora vamos implementar o movie para quando o usuário colocar a nota vai ser necessário saber tanto o id do filme como o email do usuário, é o que tem na lógica:

Movie movie = movieRepository.findById(dto.getMovieId()).get();

- vamos criar agora o score e prepara ele com a referência do usuário e do movie e também receber a nota:

Score score = new Score();
score.setMovie(movie);
score.setUser(user);
score.setValue(dto.getScore);

- temos o nosso objeto com os dados necessários
- agora vamos salvar com o saveAndFlush:  

Score score = new Score();
score.setMovie(movie);
score.setUser(user);
score.setValue(dto.getScore);

score = scoreRepository.saveAndFlush(score);

- completando vamos recalcular a avaliação média do filme e salvar no BD
- para isso é necessário ter acesso a todos as avaliações de um filme
- vamos fazer isso alterando a classe Movie VAMOS FAZER ISSO COM CALMA E COM BASTANTE ATENÇÂO
- na classe movie vamos colocar uma coleção que garante não repetir os dados:

private Set<Score> score // colocar depois do atributo image

- com isso estamos fazendo uma referência para todas as avaliações de um determinado filme
- vamos instanciar o SET:

private Set<Score> scores = new HashSet<>();

- o HashSet é uma classe que implementa um interface e o Set é uma interface sem muitos detalhes (Abstrair)
- fazer o import e o método get do Set gerando pelo getters e setters fica assim:

public Set<Score> getScores(){
   return scores;
}

- com atenção ainda vamos mapear essa lista no modelo de dados
- para mapear quem seria essa coleção vamos colocar uma anotação do JPA @OneToMany porque um filme pode ter várias avaliações e fazer o import fica assim:

@OneToMany
private Set<Score> score = new HashSet<>();

e colocar um atributo sem erra o nome dele por favor:

@OneToMany(mappedBy = "id.movie")
private Set<Score> score = new HashSet<>();

- assim é possível acessar as avaliações a partir de um objeto de filme(movie)

- agora no ScoreService vamos fazer uma forma de acessar essa lista por meio de um FOR que vai varrer todos os scores dentro de um determinado filme:

for (Score s : movie.getScores()){

}

- antes vamos calcular a soma e sempre que o for varrer soma vai receber o valor do score e acumular esses valores

double sum = 0.0;
for (Score s : movie.getScores()){
    sum = sum + s.getValue();
}


- vamos agora fazer a média, vamos pegar a quantidade e dividir pela soma:

double sum = 0.0;
for (Score s : movie.getScores()){
    sum = sum + s.getValue();
}

double avg = sum / movie.getScores().size(); // .size() é um método para pegar o tamaho da coleção

- vamos salvar a nova média e a contagem no BD:

movie.setScore(avg);
movie.setCount(movie.getScores().size());

movie = movieRepository.save(movie);

- UFA feita a lógica vamos testar

- para testar vamos alterar o return do método para o postman mostrar se salvou
- alterar o void para MovieDTO e no final colocar:
return new MovieDTO(movie); 
- fazer o import

- no scoreController vamos chamar o ScoreService:

@Autowired
private ScoreService service;

- no método colocar:

@PutMapping
public MovieDTO saveScore(@RequestBody ScoreDTO dto) {
    MovieDTO movieDTO = service.saveScore(dto);
    return movieDTO;
}

- vamos agora testar e olhar no postman

- vamos olhar no h2 o email do usuário salvo, o score e o movie 

- vamos subir no github.

1:40:00 Vaiser a integração com o BD no meu caso quero fazer do MySql e preciso pesquisar como fazer isso 




































